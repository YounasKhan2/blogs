{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer2/source-files';\r\nimport readingTime from 'reading-time';\r\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\r\nimport rehypeCodeTitles from 'rehype-code-titles';\r\nimport rehypePrettyCode from 'rehype-pretty-code';\r\nimport rehypeSlug from 'rehype-slug';\r\nimport remarkGfm from 'remark-gfm';\r\n\r\n/** @type {import('contentlayer2/source-files').ComputedFields} */\r\nconst computedFields = {\r\n  slug: {\r\n    type: 'string',\r\n    resolve: (doc) => doc._raw.flattenedPath.replace(/^posts\\//, ''),\r\n  },\r\n  slugAsParams: {\r\n    type: 'string',\r\n    resolve: (doc) => doc._raw.flattenedPath.split('/').slice(1).join('/'),\r\n  },\r\n  readingTime: {\r\n    type: 'json',\r\n    resolve: (doc) => readingTime(doc.body.raw),\r\n  },\r\n  wordCount: {\r\n    type: 'number',\r\n    resolve: (doc) => doc.body.raw.split(/\\s+/gu).length,\r\n  },\r\n};\r\n\r\nexport const Post = defineDocumentType(() => ({\r\n  name: 'Post',\r\n  filePathPattern: 'posts/**/*.md',\r\n  contentType: 'mdx',\r\n  fields: {\r\n    title: {\r\n      type: 'string',\r\n      description: 'The title of the post',\r\n      required: true,\r\n    },\r\n    metaTitle: {\r\n      type: 'string',\r\n      description: 'SEO meta title (overrides title if provided)',\r\n      required: false,\r\n    },\r\n    excerpt: {\r\n      type: 'string',\r\n      description: 'A brief description of the post',\r\n      required: false, // Changed to false to handle missing excerpts\r\n    },\r\n    metaDescription: {\r\n      type: 'string',\r\n      description: 'SEO meta description',\r\n      required: false,\r\n    },\r\n    description: {\r\n      type: 'string',\r\n      description: 'Post description (legacy field)',\r\n      required: false,\r\n    },\r\n    slug: {\r\n      type: 'string',\r\n      description: 'Custom slug (legacy field - computed slug is preferred)',\r\n      required: false,\r\n    },\r\n    imageAlt: {\r\n      type: 'string',\r\n      description: 'Alt text for the featured image',\r\n      required: false,\r\n    },\r\n    keywords: {\r\n      type: 'list',\r\n      of: { type: 'string' },\r\n      description: 'SEO keywords',\r\n      required: false,\r\n    },\r\n    date: {\r\n      type: 'date',\r\n      description: 'The date of the post',\r\n      required: true,\r\n    },\r\n    author: {\r\n      type: 'string',\r\n      description: 'The author of the post',\r\n      required: true,\r\n    },\r\n    category: {\r\n      type: 'string',\r\n      description: 'The category display name',\r\n      required: true,\r\n    },\r\n    categorySlug: {\r\n      type: 'string',\r\n      description: 'The URL-friendly category slug',\r\n      required: false, // Changed to false to handle missing categorySlug\r\n    },\r\n    tags: {\r\n      type: 'list',\r\n      of: { type: 'string' },\r\n      description: 'Tags associated with the post',\r\n      required: true,\r\n    },\r\n    image: {\r\n      type: 'string',\r\n      description: 'The featured image path',\r\n      required: false,\r\n    },\r\n    featured: {\r\n      type: 'boolean',\r\n      description: 'Whether the post is featured',\r\n      default: false,\r\n    },\r\n    published: {\r\n      type: 'boolean',\r\n      description: 'Whether the post is published',\r\n      default: true,\r\n    },\r\n    difficulty: {\r\n      type: 'enum',\r\n      options: ['Beginner', 'Intermediate', 'Advanced'],\r\n      description: 'Difficulty level for tutorials',\r\n      required: false,\r\n    },\r\n    estimatedTime: {\r\n      type: 'string',\r\n      description: 'Estimated time to complete tutorial',\r\n      required: false,\r\n    },\r\n    rating: {\r\n      type: 'number',\r\n      description: 'Product rating out of 5',\r\n      required: false,\r\n    },\r\n    pros: {\r\n      type: 'list',\r\n      of: { type: 'string' },\r\n      description: 'Pros for review posts',\r\n      required: false,\r\n    },\r\n    cons: {\r\n      type: 'list',\r\n      of: { type: 'string' },\r\n      description: 'Cons for review posts',\r\n      required: false,\r\n    },\r\n    specifications: {\r\n      type: 'json',\r\n      description: 'Product specifications',\r\n      required: false,\r\n    },\r\n  },\r\n  computedFields: {\r\n    ...computedFields,\r\n    // Auto-generate categorySlug from category if not provided\r\n    finalCategorySlug: {\r\n      type: 'string',\r\n      resolve: (doc) => doc.categorySlug || doc.category?.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, '') || 'uncategorized',\r\n    },\r\n    // Auto-generate excerpt if not provided\r\n    finalExcerpt: {\r\n      type: 'string',\r\n      resolve: (doc) => {\r\n        if (doc.excerpt) return doc.excerpt;\r\n        if (doc.metaDescription) return doc.metaDescription;\r\n        // Generate excerpt from first paragraph of content\r\n        const firstParagraph = doc.body.raw.split('\\n\\n')[0];\r\n        return firstParagraph.replace(/[#*`]/g, '').substring(0, 160) + (firstParagraph.length > 160 ? '...' : '');\r\n      },\r\n    },\r\n    // Use metaTitle if available, otherwise title\r\n    finalTitle: {\r\n      type: 'string',\r\n      resolve: (doc) => doc.metaTitle || doc.title,\r\n    },\r\n  },\r\n}));\r\n\r\nexport const Author = defineDocumentType(() => ({\r\n  name: 'Author',\r\n  filePathPattern: 'authors/**/*.md',\r\n  contentType: 'mdx',\r\n  fields: {\r\n    name: {\r\n      type: 'string',\r\n      description: 'The name of the author',\r\n      required: true,\r\n    },\r\n    bio: {\r\n      type: 'string',\r\n      description: 'Author biography',\r\n      required: true,\r\n    },\r\n    avatar: {\r\n      type: 'string',\r\n      description: 'Author avatar image path',\r\n      required: false,\r\n    },\r\n    twitter: {\r\n      type: 'string',\r\n      description: 'Twitter handle',\r\n      required: false,\r\n    },\r\n    linkedin: {\r\n      type: 'string',\r\n      description: 'LinkedIn profile URL',\r\n      required: false,\r\n    },\r\n    website: {\r\n      type: 'string',\r\n      description: 'Personal website URL',\r\n      required: false,\r\n    },\r\n    expertise: {\r\n      type: 'list',\r\n      of: { type: 'string' },\r\n      description: 'Areas of expertise',\r\n      required: false,\r\n    },\r\n  },\r\n  computedFields: {\r\n    slug: {\r\n      type: 'string',\r\n      resolve: (doc) => doc._raw.flattenedPath.replace(/^authors\\//, ''),\r\n    },\r\n  },\r\n}));\r\n\r\nexport const Category = defineDocumentType(() => ({\r\n  name: 'Category',\r\n  filePathPattern: 'categories/**/*.md',\r\n  contentType: 'mdx',\r\n  fields: {\r\n    name: {\r\n      type: 'string',\r\n      description: 'Category display name',\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: 'string',\r\n      description: 'Category description',\r\n      required: true,\r\n    },\r\n    icon: {\r\n      type: 'string',\r\n      description: 'Icon name from Lucide',\r\n      required: false,\r\n    },\r\n    color: {\r\n      type: 'string',\r\n      description: 'Category color theme',\r\n      required: false,\r\n    },\r\n    featured: {\r\n      type: 'boolean',\r\n      description: 'Whether to feature this category',\r\n      default: false,\r\n    },\r\n  },\r\n  computedFields: {\r\n    slug: {\r\n      type: 'string',\r\n      resolve: (doc) => doc._raw.flattenedPath.replace(/^categories\\//, ''),\r\n    },\r\n    postCount: {\r\n      type: 'number',\r\n      resolve: async (doc) => {\r\n        // This would be calculated at build time\r\n        return 0; // Placeholder - would count posts in this category\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nexport default makeSource({\r\n  contentDirPath: './content',\r\n  documentTypes: [Post, Author, Category],\r\n  disableImportAliasWarning: true,\r\n  mdx: {\r\n    remarkPlugins: [remarkGfm],\r\n    rehypePlugins: [\r\n      rehypeSlug,\r\n      rehypeCodeTitles,\r\n      [\r\n        rehypePrettyCode,\r\n        {\r\n          theme: {\r\n            dark: 'github-dark',\r\n            light: 'github-light',\r\n          },\r\n          keepBackground: false,\r\n          onVisitLine(node) {\r\n            // Prevent lines from collapsing in `display: grid` mode, and allow empty\r\n            // lines to be copy/pasted\r\n            if (node.children.length === 0) {\r\n              node.children = [{ type: 'text', value: ' ' }];\r\n            }\r\n          },\r\n          onVisitHighlightedLine(node) {\r\n            node.properties.className.push('line--highlighted');\r\n          },\r\n          onVisitHighlightedWord(node) {\r\n            node.properties.className = ['word--highlighted'];\r\n          },\r\n        },\r\n      ],\r\n      [\r\n        rehypeAutolinkHeadings,\r\n        {\r\n          properties: {\r\n            className: ['anchor'],\r\n          },\r\n        },\r\n      ],\r\n    ],\r\n  },\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
