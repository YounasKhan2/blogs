{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer2/source-files';\nimport readingTime from 'reading-time';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport rehypeCodeTitles from 'rehype-code-titles';\nimport rehypePrettyCode from 'rehype-pretty-code';\nimport rehypeSlug from 'rehype-slug';\nimport remarkGfm from 'remark-gfm';\n\n/** @type {import('contentlayer2/source-files').ComputedFields} */\nconst computedFields = {\n  slug: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath.replace(/^posts\\//, ''),\n  },\n  slugAsParams: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath.split('/').slice(1).join('/'),\n  },\n  readingTime: {\n    type: 'json',\n    resolve: (doc) => readingTime(doc.body.raw),\n  },\n  wordCount: {\n    type: 'number',\n    resolve: (doc) => doc.body.raw.split(/\\s+/gu).length,\n  },\n};\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: 'posts/**/*.md',\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      description: 'The title of the post',\n      required: true,\n    },\n    metaTitle: {\n      type: 'string',\n      description: 'SEO meta title (overrides title if provided)',\n      required: false,\n    },\n    excerpt: {\n      type: 'string',\n      description: 'A brief description of the post',\n      required: false, // Changed to false to handle missing excerpts\n    },\n    metaDescription: {\n      type: 'string',\n      description: 'SEO meta description',\n      required: false,\n    },\n    description: {\n      type: 'string',\n      description: 'Post description (legacy field)',\n      required: false,\n    },\n    slug: {\n      type: 'string',\n      description: 'Custom slug (legacy field - computed slug is preferred)',\n      required: false,\n    },\n    imageAlt: {\n      type: 'string',\n      description: 'Alt text for the featured image',\n      required: false,\n    },\n    keywords: {\n      type: 'list',\n      of: { type: 'string' },\n      description: 'SEO keywords',\n      required: false,\n    },\n    date: {\n      type: 'date',\n      description: 'The date of the post',\n      required: true,\n    },\n    author: {\n      type: 'string',\n      description: 'The author of the post',\n      required: true,\n    },\n    category: {\n      type: 'string',\n      description: 'The category display name',\n      required: true,\n    },\n    categorySlug: {\n      type: 'string',\n      description: 'The URL-friendly category slug',\n      required: false, // Changed to false to handle missing categorySlug\n    },\n    tags: {\n      type: 'list',\n      of: { type: 'string' },\n      description: 'Tags associated with the post',\n      required: true,\n    },\n    image: {\n      type: 'string',\n      description: 'The featured image path',\n      required: false,\n    },\n    featured: {\n      type: 'boolean',\n      description: 'Whether the post is featured',\n      default: false,\n    },\n    published: {\n      type: 'boolean',\n      description: 'Whether the post is published',\n      default: true,\n    },\n    difficulty: {\n      type: 'enum',\n      options: ['Beginner', 'Intermediate', 'Advanced'],\n      description: 'Difficulty level for tutorials',\n      required: false,\n    },\n    estimatedTime: {\n      type: 'string',\n      description: 'Estimated time to complete tutorial',\n      required: false,\n    },\n    rating: {\n      type: 'number',\n      description: 'Product rating out of 5',\n      required: false,\n    },\n    pros: {\n      type: 'list',\n      of: { type: 'string' },\n      description: 'Pros for review posts',\n      required: false,\n    },\n    cons: {\n      type: 'list',\n      of: { type: 'string' },\n      description: 'Cons for review posts',\n      required: false,\n    },\n    specifications: {\n      type: 'json',\n      description: 'Product specifications',\n      required: false,\n    },\n  },\n  computedFields: {\n    ...computedFields,\n    // Auto-generate categorySlug from category if not provided\n    finalCategorySlug: {\n      type: 'string',\n      resolve: (doc) => doc.categorySlug || doc.category?.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, '') || 'uncategorized',\n    },\n    // Auto-generate excerpt if not provided\n    finalExcerpt: {\n      type: 'string',\n      resolve: (doc) => {\n        if (doc.excerpt) return doc.excerpt;\n        if (doc.metaDescription) return doc.metaDescription;\n        // Generate excerpt from first paragraph of content\n        const firstParagraph = doc.body.raw.split('\\n\\n')[0];\n        return firstParagraph.replace(/[#*`]/g, '').substring(0, 160) + (firstParagraph.length > 160 ? '...' : '');\n      },\n    },\n    // Use metaTitle if available, otherwise title\n    finalTitle: {\n      type: 'string',\n      resolve: (doc) => doc.metaTitle || doc.title,\n    },\n  },\n}));\n\nexport const Author = defineDocumentType(() => ({\n  name: 'Author',\n  filePathPattern: 'authors/**/*.md',\n  contentType: 'mdx',\n  fields: {\n    name: {\n      type: 'string',\n      description: 'The name of the author',\n      required: true,\n    },\n    bio: {\n      type: 'string',\n      description: 'Author biography',\n      required: true,\n    },\n    avatar: {\n      type: 'string',\n      description: 'Author avatar image path',\n      required: false,\n    },\n    twitter: {\n      type: 'string',\n      description: 'Twitter handle',\n      required: false,\n    },\n    linkedin: {\n      type: 'string',\n      description: 'LinkedIn profile URL',\n      required: false,\n    },\n    website: {\n      type: 'string',\n      description: 'Personal website URL',\n      required: false,\n    },\n    expertise: {\n      type: 'list',\n      of: { type: 'string' },\n      description: 'Areas of expertise',\n      required: false,\n    },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (doc) => doc._raw.flattenedPath.replace(/^authors\\//, ''),\n    },\n  },\n}));\n\nexport const Category = defineDocumentType(() => ({\n  name: 'Category',\n  filePathPattern: 'categories/**/*.md',\n  contentType: 'mdx',\n  fields: {\n    name: {\n      type: 'string',\n      description: 'Category display name',\n      required: true,\n    },\n    description: {\n      type: 'string',\n      description: 'Category description',\n      required: true,\n    },\n    icon: {\n      type: 'string',\n      description: 'Icon name from Lucide',\n      required: false,\n    },\n    color: {\n      type: 'string',\n      description: 'Category color theme',\n      required: false,\n    },\n    featured: {\n      type: 'boolean',\n      description: 'Whether to feature this category',\n      default: false,\n    },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (doc) => doc._raw.flattenedPath.replace(/^categories\\//, ''),\n    },\n    postCount: {\n      type: 'number',\n      resolve: async (doc) => {\n        // This would be calculated at build time\n        return 0; // Placeholder - would count posts in this category\n      },\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: './content',\n  documentTypes: [Post, Author, Category],\n  disableImportAliasWarning: true,\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeSlug,\n      rehypeCodeTitles,\n      [\n        rehypePrettyCode,\n        {\n          theme: {\n            dark: 'github-dark',\n            light: 'github-light',\n          },\n          keepBackground: false,\n          onVisitLine(node) {\n            // Prevent lines from collapsing in `display: grid` mode, and allow empty\n            // lines to be copy/pasted\n            if (node.children.length === 0) {\n              node.children = [{ type: 'text', value: ' ' }];\n            }\n          },\n          onVisitHighlightedLine(node) {\n            node.properties.className.push('line--highlighted');\n          },\n          onVisitHighlightedWord(node) {\n            node.properties.className = ['word--highlighted'];\n          },\n        },\n      ],\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: ['anchor'],\n          },\n        },\n      ],\n    ],\n  },\n});\n"],
  "mappings": "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",
  "names": []
}
